import streamlit as st
import pandas as pd
import time
import random
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Demo - Integra√ß√£o RD Station √ó CIGAM ERP | AddLife Diagn√≥sticos",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado com cores da AddLife
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #E53E3E 0%, #C53030 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .addlife-logo {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .logo-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
    }
    .logo-icon {
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, #E53E3E 0%, #C53030 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    .logo-icon::before {
        content: "üíß";
        color: white;
        font-size: 24px;
        transform: rotate(-20deg);
    }
    .logo-text {
        font-family: 'Arial', sans-serif;
        font-size: 28px;
        font-weight: bold;
        color: #666;
    }
    .logo-add {
        color: #666;
    }
    .logo-life {
        color: #E53E3E;
        font-style: italic;
    }
    .logo-subtitle {
        font-size: 12px;
        color: #999;
        margin-left: 5px;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #E53E3E;
    }
    .sync-success {
        background: #d4edda;
        color: #155724;
        padding: 0.5rem;
        border-radius: 5px;
        margin: 0.2rem 0;
    }
    .sync-error {
        background: #f8d7da;
        color: #721c24;
        padding: 0.5rem;
        border-radius: 5px;
        margin: 0.2rem 0;
    }
    .sync-info {
        background: #d1ecf1;
        color: #0c5460;
        padding: 0.5rem;
        border-radius: 5px;
        margin: 0.2rem 0;
    }
    .client-card {
        background: #fef2f2;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #E53E3E;
    }
</style>
""", unsafe_allow_html=True)

# Header principal com logotipo AddLife
st.markdown("""
<div class="main-header">
    <div class="addlife-logo">
        <div class="logo-container">
            <div>
                <img src="https://images.tcdn.com.br/files/1172397/themes/7/img/settings/logo.png" 
             alt="AddLife Diagn√≥sticos" 
             style="max-width: 200px; height: auto;">
            </div>
        </div>
    </div>
    <h1>üîÑ Integra√ß√£o RD Station √ó CIGAM ERP</h1>
    <p>Demonstra√ß√£o Personalizada dos Fluxos de Sincroniza√ß√£o para Laborat√≥rios</p>
</div>
""", unsafe_allow_html=True)

# Dados fict√≠cios espec√≠ficos para AddLife (laborat√≥rios e hospitais como clientes)
@st.cache_data
def gerar_dados_addlife():
    # Leads do RD Station - Laborat√≥rios e Hospitais
    leads_rd = [
        {"id": "RD001", "nome": "Laborat√≥rio Santa Clara", "email": "compras@labsantaclara.com.br", "telefone": "(31) 98765-4321", "status": "Oportunidade", "cnpj": "12.345.678/0001-90", "interesse": "Equipamento Hematologia"},
        {"id": "RD002", "nome": "Hospital das Cl√≠nicas BH", "email": "suprimentos@hcbh.org.br", "telefone": "(31) 91234-5678", "status": "Lead Qualificado", "cnpj": "98.765.432/0001-10", "interesse": "Reagentes Bioqu√≠mica"},
        {"id": "RD003", "nome": "Lab Diagnose Premium", "email": "contato@diagnose.com.br", "telefone": "(31) 99988-7766", "status": "Oportunidade", "cnpj": "11.222.333/0001-44", "interesse": "Gasometria + Point of Care"},
        {"id": "RD004", "nome": "Centro M√©dico Mater Dei", "email": "compras@materdei.com.br", "telefone": "(31) 95555-4444", "status": "Negocia√ß√£o", "cnpj": "55.666.777/0001-88", "interesse": "Kit Hemoglobina Glicada"},
        {"id": "RD005", "nome": "Laborat√≥rio Biocenter", "email": "gerencia@biocenter.com.br", "telefone": "(31) 94444-3333", "status": "Lead Qualificado", "cnpj": "77.888.999/0001-22", "interesse": "Uroan√°lise Automatizada"},
    ]
    
    # Clientes no CIGAM ERP
    clientes_cigam = [
        {"id": "CLI001", "codigo": "12.345.678/0001-90", "nome": "Laborat√≥rio Santa Clara", "limite_credito": 180000, "saldo_devedor": 45000, "status": "Ativo", "tipo": "Laborat√≥rio Privado"},
        {"id": "CLI002", "codigo": "98.765.432/0001-10", "nome": "Hospital das Cl√≠nicas BH", "limite_credito": 500000, "saldo_devedor": 0, "status": "Ativo", "tipo": "Hospital P√∫blico"},
        {"id": "CLI003", "codigo": "11.222.333/0001-44", "nome": "Lab Diagnose Premium", "limite_credito": 220000, "saldo_devedor": 32000, "status": "Ativo", "tipo": "Laborat√≥rio Premium"},
    ]
    
    # Pedidos espec√≠ficos da √°rea m√©dica
    pedidos = [
        {"id": "PED001", "cliente_id": "CLI001", "rd_deal_id": "RD001", "valor": 95000, "status": "Entregue", "data": "2025-06-10", "equipamento": "Analisador Hematol√≥gico XL-640"},
        {"id": "PED002", "cliente_id": "CLI002", "rd_deal_id": "RD002", "valor": 12500, "status": "Em Tr√¢nsito", "data": "2025-06-12", "equipamento": "Kit Reagentes Bioqu√≠mica (50 testes)"},
        {"id": "PED003", "cliente_id": "CLI003", "rd_deal_id": "RD003", "valor": 165000, "status": "Instala√ß√£o Agendada", "data": "2025-06-14", "equipamento": "Sistema Gasometria + Point of Care"},
    ]
    
    # Produtos/Equipamentos espec√≠ficos AddLife
    produtos = [
        {"codigo": "HEMA-XL640", "nome": "Analisador Hematol√≥gico XL-640", "estoque": 8, "preco": 95000, "categoria": "Hematologia", "fabricante": "Erba Mannheim"},
        {"codigo": "BIO-KIT50", "nome": "Kit Reagentes Bioqu√≠mica (50 testes)", "estoque": 150, "preco": 2500, "categoria": "Bioqu√≠mica", "fabricante": "Kovalent"},
        {"codigo": "GASO-POC", "nome": "Sistema Gasometria + Point of Care", "estoque": 3, "preco": 165000, "categoria": "Gasometria", "fabricante": "Siemens Healthineers"},
        {"codigo": "HBA1C-KIT", "nome": "Kit Hemoglobina Glicada", "estoque": 45, "preco": 1800, "categoria": "Marcador Card√≠aco", "fabricante": "Afias"},
        {"codigo": "URIN-AUTO", "nome": "Analisador Uroan√°lise Automatizada", "estoque": 12, "preco": 75000, "categoria": "Uroan√°lise", "fabricante": "Erba Mannheim"},
        {"codigo": "COAG-XL", "nome": "Analisador Coagula√ß√£o XL-200", "estoque": 6, "preco": 120000, "categoria": "Coagula√ß√£o", "fabricante": "Erba Brasil"},
    ]
    
    return leads_rd, clientes_cigam, pedidos, produtos

# Inicializar dados espec√≠ficos AddLife
if 'dados_addlife_inicializados' not in st.session_state:
    st.session_state.leads_rd, st.session_state.clientes_cigam, st.session_state.pedidos, st.session_state.produtos = gerar_dados_addlife()
    st.session_state.logs = []
    st.session_state.metricas = {
        'sincronizacoes_hoje': 28,
        'equipamentos_vendidos': 7,
        'leads_laboratorios': 15,
        'assistencias_agendadas': 5
    }
    st.session_state.dados_addlife_inicializados = True

# Sidebar - Controles espec√≠ficos AddLife
st.sidebar.header("üéõÔ∏è Controles da Demonstra√ß√£o AddLife")

# Informa√ß√µes da AddLife
st.sidebar.markdown("""
### üè• AddLife Diagn√≥sticos
**Fundada:** 2002 ‚Ä¢ **Sede:** Belo Horizonte/MG  
**Diretor:** Robson Resende Pereira  
**Atua√ß√£o:** Minas Gerais e regi√µes  
""")

# Sele√ß√£o do fluxo espec√≠fico para neg√≥cio de equipamentos m√©dicos
fluxo_demo = st.sidebar.selectbox(
    "Escolha o Fluxo para Demonstrar:",
    [
        "1. üè• Laborat√≥rio Lead ‚Üí Cliente ERP",
        "2. üìã Or√ßamento Equipamento ‚Üí Pedido ERP",
        "3. üìä Status Entrega ‚Üí Atualizar CRM",
        "4. üí∞ Situa√ß√£o Financeira ‚Üí CRM",
        "5. üì¶ Consulta Estoque Equipamentos",
        "6. üìà Hist√≥rico Compras Laborat√≥rio",
        "7. üí≤ Tabela Pre√ßos por Categoria"
    ]
)

# Bot√£o para executar demonstra√ß√£o
if st.sidebar.button("‚ñ∂Ô∏è Executar Demonstra√ß√£o", type="primary"):
    st.session_state.executar_demo = True

# Configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
velocidade_demo = st.sidebar.slider("Velocidade da Demo (segundos)", 0.5, 3.0, 1.5)
mostrar_logs_detalhados = st.sidebar.checkbox("Mostrar Logs Detalhados", True)
simular_erro = st.sidebar.checkbox("Simular Erro de Conex√£o", False)

# Layout principal
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìä Dashboard de Vendas e Opera√ß√µes")
    
    # M√©tricas espec√≠ficas AddLife
    met_col1, met_col2, met_col3, met_col4 = st.columns(4)
    
    with met_col1:
        st.metric(
            "Sincroniza√ß√µes Hoje", 
            st.session_state.metricas['sincronizacoes_hoje'],
            delta="‚ÜóÔ∏è +8 vs ontem"
        )
    
    with met_col2:
        st.metric(
            "Equipamentos Vendidos", 
            st.session_state.metricas['equipamentos_vendidos'],
            delta="üéØ Meta: 10/m√™s"
        )
    
    with met_col3:
        st.metric(
            "Leads Laborat√≥rios", 
            st.session_state.metricas['leads_laboratorios'],
            delta="‚ÜóÔ∏è +4 esta semana"
        )
    
    with met_col4:
        st.metric(
            "Assist√™ncias Agendadas", 
            st.session_state.metricas['assistencias_agendadas'],
            delta="üîß Preventivas"
        )

with col2:
    st.header("üîÑ Status Sistema AddLife")
    
    # Status das conex√µes
    st.markdown("**Integra√ß√µes Ativas:**")
    st.success("üü¢ RD Station Marketing - Conectado")
    st.success("üü¢ RD Station CRM - Conectado") 
    st.success("üü¢ CIGAM ERP - Conectado")
    st.info("üîµ Sistema Assist√™ncia T√©cnica - OK")
    
    # √öltima sincroniza√ß√£o
    st.markdown("**√öltima Sincroniza√ß√£o:**")
    st.info(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    
    # Pr√≥ximas tarefas
    st.markdown("**Pr√≥ximas Atividades:**")
    st.warning("üìÖ Instala√ß√£o Lab Diagnose - 16/06")
    st.warning("üîß Manuten√ß√£o HC BH - 17/06")

# Fun√ß√£o para simular API calls espec√≠ficas AddLife
def simular_api_call_addlife(sistema, endpoint, metodo="GET", dados=None):
    """Simula chamadas API espec√≠ficas para o neg√≥cio AddLife"""
    time.sleep(random.uniform(0.8, 2.0))  # Tempo mais realista
    
    if simular_erro and random.random() < 0.15:  # 15% chance erro quando ativado
        return {"status": "error", "message": "Timeout na conex√£o com servidor"}
    
    return {
        "status": "success", 
        "data": dados or {"message": f"Opera√ß√£o {metodo} em {endpoint} conclu√≠da"},
        "timestamp": datetime.now().isoformat()
    }

# Fun√ß√£o para adicionar log espec√≠fico AddLife
def adicionar_log_addlife(tipo, sistema, mensagem):
    """Adiciona log com contexto espec√≠fico AddLife"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = {
        "timestamp": timestamp,
        "tipo": tipo,
        "sistema": sistema,
        "mensagem": mensagem
    }
    st.session_state.logs.insert(0, log_entry)
    
    if len(st.session_state.logs) > 50:
        st.session_state.logs = st.session_state.logs[:50]

# Demonstra√ß√µes espec√≠ficas AddLife
if 'executar_demo' in st.session_state and st.session_state.executar_demo:
    
    demo_container = st.container()
    
    with demo_container:
        st.header(f"üé¨ Demonstra√ß√£o AddLife: {fluxo_demo}")
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        if fluxo_demo.startswith("1."):
            # Fluxo 1: Laborat√≥rio Lead ‚Üí Cliente ERP
            status_text.text("Processando novo lead de laborat√≥rio...")
            progress_bar.progress(10)
            time.sleep(velocidade_demo)
            
            adicionar_log_addlife("INFO", "RD Station", "Webhook: Lead 'Laborat√≥rio Santa Clara' marcado como oportunidade - Interesse: Equipamento Hematologia")
            status_text.text("üì• Webhook recebido - Laborat√≥rio interessado em equipamento...")
            progress_bar.progress(25)
            time.sleep(velocidade_demo)
            
            status_text.text("üîç Consultando hist√≥rico do laborat√≥rio...")
            resultado_rd = simular_api_call_addlife("RD Station", "/platform/contacts/RD001", "GET")
            
            if resultado_rd["status"] == "success":
                adicionar_log_addlife("SUCCESS", "RD Station", "Dados completos do laborat√≥rio recuperados")
                progress_bar.progress(50)
                time.sleep(velocidade_demo)
                
                status_text.text("üè• Classificando tipo de laborat√≥rio (Privado/P√∫blico)...")
                progress_bar.progress(65)
                time.sleep(velocidade_demo)
                
                status_text.text("üì§ Criando cadastro no CIGAM ERP...")
                dados_lab = {
                    "razao_social": "Laborat√≥rio Santa Clara",
                    "cnpj": "12.345.678/0001-90",
                    "email": "compras@labsantaclara.com.br",
                    "telefone": "(31) 98765-4321",
                    "tipo_cliente": "Laborat√≥rio Privado",
                    "segmento": "Diagn√≥stico Cl√≠nico",
                    "limite_credito": 180000
                }
                
                resultado_cigam = simular_api_call_addlife("CIGAM", "/api/clientes", "POST", dados_lab)
                
                if resultado_cigam["status"] == "success":
                    adicionar_log_addlife("SUCCESS", "CIGAM", "Laborat√≥rio cadastrado - ID: CLI004 | Limite R$ 180.000")
                    progress_bar.progress(85)
                    time.sleep(velocidade_demo)
                    
                    status_text.text("üéØ Criando oportunidade para equipamento hematologia...")
                    progress_bar.progress(100)
                    adicionar_log_addlife("SUCCESS", "Sistema", "Lead ‚Üí Cliente: RD001 ‚Üí CLI004 | Produto sugerido: Analisador XL-640")
                    
                    st.success("‚úÖ Laborat√≥rio convertido em cliente com sucesso!")
                    
                    # Card do novo cliente
                    st.markdown("""
                    <div class="client-card">
                        <h4>üè• Novo Cliente Cadastrado</h4>
                        <p><strong>Laborat√≥rio:</strong> Santa Clara<br>
                        <strong>Tipo:</strong> Laborat√≥rio Privado<br>
                        <strong>Interesse:</strong> Analisador Hematol√≥gico XL-640<br>
                        <strong>Limite Cr√©dito:</strong> R$ 180.000<br>
                        <strong>Pr√≥ximo Passo:</strong> Agendamento visita t√©cnica</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
        elif fluxo_demo.startswith("2."):
            # Fluxo 2: Or√ßamento Equipamento ‚Üí Pedido ERP
            status_text.text("Processando or√ßamento de equipamento m√©dico...")
            progress_bar.progress(15)
            
            adicionar_log_addlife("INFO", "RD Station CRM", "Or√ßamento aprovado: Sistema Gasometria POC - R$ 165.000")
            time.sleep(velocidade_demo)
            
            status_text.text("üîç Verificando disponibilidade do equipamento...")
            progress_bar.progress(30)
            time.sleep(velocidade_demo)
            
            status_text.text("üí≥ Consultando limite de cr√©dito do laborat√≥rio...")
            progress_bar.progress(50)
            adicionar_log_addlife("SUCCESS", "CIGAM", "Limite aprovado: R$ 165.000 dispon√≠vel de R$ 220.000")
            time.sleep(velocidade_demo)
            
            status_text.text("üìã Gerando pedido no ERP...")
            pedido_data = {
                "cliente_id": "CLI003",
                "equipamento": "Sistema Gasometria + Point of Care",
                "codigo": "GASO-POC",
                "valor_unitario": 165000,
                "quantidade": 1,
                "instalacao_inclusa": True,
                "treinamento_incluso": True,
                "garantia_meses": 24
            }
            resultado = simular_api_call_addlife("CIGAM", "/api/pedidos", "POST", pedido_data)
            
            progress_bar.progress(80)
            adicionar_log_addlife("SUCCESS", "CIGAM", "Pedido PED004 criado | Instala√ß√£o agendada para 20/06")
            time.sleep(velocidade_demo)
            
            status_text.text("üìÖ Agendando instala√ß√£o e treinamento...")
            progress_bar.progress(100)
            adicionar_log_addlife("SUCCESS", "Sistema", "Instala√ß√£o agendada | Equipe t√©cnica notificada")
            
            st.success("‚úÖ Pedido de equipamento processado com sucesso!")
            
            # Detalhes do pedido
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Valor do Pedido", "R$ 165.000")
                st.metric("Prazo Entrega", "5 dias √∫teis")
            with col_b:
                st.metric("Garantia", "24 meses")
                st.metric("Instala√ß√£o", "‚úÖ Inclu√≠da")
                
        elif fluxo_demo.startswith("3."):
            # Fluxo 3: Status Entrega ‚Üí CRM
            status_text.text("Atualizando status de entrega no CRM...")
            progress_bar.progress(20)
            
            adicionar_log_addlife("INFO", "CIGAM", "Equipamento XL-640 entregue e instalado no Lab Santa Clara")
            time.sleep(velocidade_demo)
            
            status_text.text("‚úÖ Confirmando instala√ß√£o e treinamento...")
            progress_bar.progress(40)
            time.sleep(velocidade_demo)
            
            status_text.text("üìû Sincronizando com equipe comercial...")
            progress_bar.progress(70)
            resultado = simular_api_call_addlife("RD Station CRM", "/deals/RD001", "PUT", 
                                               {"status": "Equipamento Instalado", "proxima_acao": "Follow-up p√≥s-venda"})
            time.sleep(velocidade_demo)
            
            progress_bar.progress(100)
            adicionar_log_addlife("SUCCESS", "RD Station CRM", "Status atualizado | Follow-up p√≥s-venda agendado para 7 dias")
            st.success("‚úÖ Status sincronizado com equipe comercial!")
            
            st.info("üìã **Pr√≥ximas A√ß√µes:** Follow-up em 7 dias ‚Ä¢ Treinamento adicional se necess√°rio ‚Ä¢ Apresenta√ß√£o novos produtos")
            
        elif fluxo_demo.startswith("4."):
            # Fluxo 4: Situa√ß√£o Financeira ‚Üí CRM
            status_text.text("Consultando situa√ß√£o financeira dos laborat√≥rios...")
            progress_bar.progress(25)
            
            adicionar_log_addlife("INFO", "CIGAM", "Analisando situa√ß√£o financeira - Hospital das Cl√≠nicas BH")
            time.sleep(velocidade_demo)
            
            status_text.text("üí∞ Calculando limite dispon√≠vel...")
            progress_bar.progress(50)
            time.sleep(velocidade_demo)
            
            status_text.text("üìä Verificando hist√≥rico de pagamentos...")
            progress_bar.progress(75)
            
            info_financeira = {
                "limite_credito": 500000,
                "credito_disponivel": 500000,
                "inadimplente": False,
                "categoria_pagador": "Excelente",
                "prazo_medio_pagto": 30,
                "ultima_compra": "2025-05-15"
            }
            
            resultado = simular_api_call_addlife("RD Station CRM", "/contacts/update_financial", "PUT", info_financeira)
            progress_bar.progress(100)
            adicionar_log_addlife("SUCCESS", "RD Station CRM", "Situa√ß√£o financeira atualizada - Cliente Premium")
            st.success("‚úÖ Informa√ß√µes financeiras sincronizadas!")
            
            # Dashboard financeiro
            col_a, col_b, col_c = st.columns(3)
            with col_a:
                st.metric("Limite Total", "R$ 500.000", "üèõÔ∏è P√∫blico")
                st.metric("Dispon√≠vel", "R$ 500.000", "üíö 100%")
            with col_b:
                st.metric("Categoria", "Excelente", "‚≠ê Premium")
                st.metric("Prazo M√©dio", "30 dias", "üìÖ Pontual")
            with col_c:
                st.metric("Status", "‚úÖ Adimplente", "üü¢ Liberado")
                st.metric("Risco", "Baixo", "üõ°Ô∏è Seguro")
                
        elif fluxo_demo.startswith("5."):
            # Fluxo 5: Consulta Estoque Equipamentos
            status_text.text("Consultando estoque de equipamentos m√©dicos...")
            progress_bar.progress(25)
            
            adicionar_log_addlife("INFO", "Sistema", "Solicita√ß√£o de consulta - Equipamentos Hematologia")
            time.sleep(velocidade_demo)
            
            status_text.text("üì¶ Verificando disponibilidade por categoria...")
            progress_bar.progress(60)
            
            resultado = simular_api_call_addlife("CIGAM", "/api/produtos/estoque", "GET")
            progress_bar.progress(85)
            time.sleep(velocidade_demo)
            
            status_text.text("üöö Calculando prazos de entrega...")
            progress_bar.progress(100)
            adicionar_log_addlife("SUCCESS", "CIGAM", "Estoque consultado - 6 categorias dispon√≠veis")
            st.success("‚úÖ Estoque atualizado em tempo real!")
            
            # Mostrar estoque por categoria
            df_estoque = pd.DataFrame(st.session_state.produtos)
            
            # Gr√°fico de estoque por categoria
            fig_estoque = px.bar(
                df_estoque, 
                x='categoria', 
                y='estoque',
                color='categoria',
                title="Estoque Dispon√≠vel por Categoria",
                labels={'estoque': 'Unidades', 'categoria': 'Categoria'}
            )
            st.plotly_chart(fig_estoque, use_container_width=True)
            
        elif fluxo_demo.startswith("6."):
            # Fluxo 6: Hist√≥rico Compras Laborat√≥rio
            status_text.text("Analisando hist√≥rico de compras do laborat√≥rio...")
            progress_bar.progress(30)
            
            adicionar_log_addlife("INFO", "CIGAM", "Consultando hist√≥rico - Laborat√≥rio Santa Clara")
            time.sleep(velocidade_demo)
            
            status_text.text("üìà Calculando padr√µes de consumo...")
            progress_bar.progress(70)
            time.sleep(velocidade_demo)
            
            progress_bar.progress(100)
            adicionar_log_addlife("SUCCESS", "RD Station CRM", "Hist√≥rico sincronizado - Insights de venda gerados")
            st.success("‚úÖ An√°lise de hist√≥rico conclu√≠da!")
            
            # Dados do hist√≥rico
            historico_data = {
                "primeira_compra": "2023-03-15",
                "ultima_compra": "2025-05-20", 
                "total_investido": 340000,
                "equipamentos_adquiridos": 4,
                "categoria_preferida": "Hematologia",
                "frequencia_compra": "Trimestral",
                "ticket_medio": 85000
            }
            
            col_hist1, col_hist2, col_hist3 = st.columns(3)
            with col_hist1:
                st.metric("Total Investido", "R$ 340.000", "üí∞ Cliente VIP")
                st.metric("Equipamentos", "4 unidades", "üî¨ Diversos")
            with col_hist2:
                st.metric("Frequ√™ncia", "Trimestral", "üìÖ Regular")
                st.metric("Ticket M√©dio", "R$ 85.000", "üíé Premium")
            with col_hist3:
                st.metric("Categoria Preferida", "Hematologia", "ü©∏ Especialidade")
                st.metric("Pr√≥xima Compra", "Prevista Set/2025", "üéØ Prospec√ß√£o")
                
        # Resetar flag
        st.session_state.executar_demo = False

# Se√ß√£o de Logs espec√≠ficos AddLife
st.header("üìù Logs de Opera√ß√£o AddLife")

if mostrar_logs_detalhados and st.session_state.logs:
    with st.container():
        for log in st.session_state.logs[:8]:  # Mostrar 8 mais recentes
            if log["tipo"] == "SUCCESS":
                st.markdown(f'<div class="sync-success">‚úÖ {log["timestamp"]} | {log["sistema"]} | {log["mensagem"]}</div>', unsafe_allow_html=True)
            elif log["tipo"] == "ERROR":
                st.markdown(f'<div class="sync-error">‚ùå {log["timestamp"]} | {log["sistema"]} | {log["mensagem"]}</div>', unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="sync-info">‚ÑπÔ∏è {log["timestamp"]} | {log["sistema"]} | {log["mensagem"]}</div>', unsafe_allow_html=True)

# Analytics espec√≠ficos AddLife
st.header("üìà Analytics de Vendas AddLife")

col_graf1, col_graf2 = st.columns(2)

with col_graf1:
    # Vendas por categoria de equipamento
    categorias = ["Hematologia", "Bioqu√≠mica", "Gasometria", "Uroan√°lise", "Coagula√ß√£o", "Marcador Card√≠aco"]
    vendas = [450000, 280000, 520000, 180000, 340000, 95000]
    
    fig_vendas = px.bar(
        x=categorias, 
        y=vendas,
        title="Faturamento por Categoria (√öltimos 6 meses)",
        labels={"x": "Categoria", "y": "Faturamento (R$)"},
        color=vendas,
        color_continuous_scale="Blues"
    )
    fig_vendas.update_layout(height=350)
    st.plotly_chart(fig_vendas, use_container_width=True)

with col_graf2:
    # Pipeline de vendas
    pipeline_data = {
        "Est√°gio": ["Prospec√ß√£o", "Qualifica√ß√£o", "Proposta", "Negocia√ß√£o", "Fechamento"],
        "Valor": [1200000, 850000, 520000, 380000, 165000]
    }
    
    fig_pipeline = px.funnel(
        pipeline_data,
        x="Valor",
        y="Est√°gio",
        title="Pipeline de Vendas AddLife"
    )
    fig_pipeline.update_layout(height=350)
    st.plotly_chart(fig_pipeline, use_container_width=True)

# Dados das tabelas espec√≠ficos AddLife
st.header("üóÉÔ∏è Base de Dados AddLife")

tab1, tab2, tab3 = st.tabs(["üè• Laborat√≥rios/Hospitais", "üìã Pedidos Equipamentos", "üî¨ Produtos/Estoque"])

with tab1:
    st.subheader("Clientes - Laborat√≥rios e Hospitais")
    df_clientes = pd.DataFrame(st.session_state.clientes_cigam)
    st.dataframe(df_clientes, use_container_width=True)

with tab2:
    st.subheader("Pedidos de Equipamentos e Reagentes")
    df_pedidos = pd.DataFrame(st.session_state.pedidos)
    st.dataframe(df_pedidos, use_container_width=True)

with tab3:
    st.subheader("Cat√°logo de Produtos AddLife")
    df_produtos = pd.DataFrame(st.session_state.produtos)
    st.dataframe(df_produtos, use_container_width=True)

# Footer espec√≠fico AddLife
st.markdown("---")
st.markdown("""
### üéØ Benef√≠cios da Integra√ß√£o para AddLife Diagn√≥sticos

- ‚ö° **Gest√£o Automatizada de Leads**: Laborat√≥rios e hospitais s√£o automaticamente cadastrados
- üîÑ **Sincroniza√ß√£o de Pedidos**: Or√ßamentos viram pedidos sem retrabalho manual
- üéØ **Segmenta√ß√£o Inteligente**: Laborat√≥rios privados vs hospitais p√∫blicos
- üìä **An√°lise de Consumo**: Padr√µes de compra por tipo de equipamento
- üîß **Gest√£o de Assist√™ncia**: Integra√ß√£o com agenda de manuten√ß√µes
- üí∞ **Controle Financeiro**: Limites espec√≠ficos por tipo de cliente

#### üè• Espec√≠fico para o Setor de Diagn√≥sticos:
- **Rastreamento de Equipamentos**: Por n√∫mero de s√©rie e localiza√ß√£o
- **Gest√£o de Garantias**: Controle autom√°tico de vencimentos
- **Alertas de Manuten√ß√£o**: Preventivas baseadas em uso
- **Relat√≥rios Regulat√≥rios**: Para ANVISA e vigil√¢ncia sanit√°ria

*Demo personalizada para AddLife Diagn√≥sticos - Tecnologia em Diagn√≥sticos desde 2002*
""")

# Auto-refresh opcional
if st.sidebar.checkbox("Auto-refresh (10s)", False):
    time.sleep(10)
    st.rerun()